<?php

use Drupal\cls_migrate\ClsMigrateGroup;
use Drupal\Component\Utility\Html;
use Drupal\migrate\MigrateSkipRowException;
use Drupal\migrate\Plugin\MigrateSourceInterface;
use Drupal\migrate\Plugin\MigrationInterface;
use Drupal\migrate\Row;
use Drupal\user\UserInterface;

/**
 * Implements hook_migrate_MIGRATE_ID_prepare_row
 * Only import certain vocabularies.
 *
 * @param  \Drupal\migrate\Row  $row
 * @param  \Drupal\migrate\Plugin\MigrateSourceInterface  $source
 * @param  \Drupal\migrate\Plugin\MigrationInterface  $migration
 *
 * @throws \Drupal\migrate\MigrateSkipRowException
 */
function cls_migrate_migrate_cls_taxonomy_vocabularies_prepare_row(Row $row, MigrateSourceInterface $source, MigrationInterface $migration) {
  $vocabs = [
      'aspect_ratio',
      'generation',
      'carrier',
      'grant_cycle',
      'metadata_shares',
      'production_stream',
      'running_speed',
      'vendor_services'
    ];


    if (!in_array($row->getSourceProperty('machine_name'), $vocabs)) {
      throw new MigrateSkipRowException($row->getSourceProperty('machine_name') . ' not imported.', TRUE);
    }
}

/**
 * Implements hook_migrate_MIGRATE_ID_prepare_row
 * For the generations import, we want to only import the av generation terms, determined
 * by their parent term, which has tid 37409.
 *
 * @param  \Drupal\migrate\Row  $row
 * @param  \Drupal\migrate\Plugin\MigrateSourceInterface  $source
 * @param  \Drupal\migrate\Plugin\MigrationInterface  $migration
 *
 * @throws \Drupal\migrate\MigrateSkipRowException
 */
function cls_migrate_migrate_cls_taxonomy_term_generation_prepare_row(Row $row, MigrateSourceInterface $source, MigrationInterface $migration) {
  $parent_tid = 37409;
  $row_parent = $row->hasSourceProperty('parent') ? $row->getSourceProperty('parent') : 0;
  if(is_array($row_parent) && in_array( $parent_tid, $row_parent)) {
    $row->setSourceProperty('parent', [0 => 0]);
  }
  else {
    throw new MigrateSkipRowException('', TRUE);
  }
}


/**
 * Implements hook_migrate_MIGRATE_ID_prepare_row
 * For the generations import, we want to only import the av generation terms, determined
 * by their parent term, which has tid 37409.
 *
 * @param  \Drupal\migrate\Row  $row
 * @param  \Drupal\migrate\Plugin\MigrateSourceInterface  $source
 * @param  \Drupal\migrate\Plugin\MigrationInterface  $migration
 *
 * @throws \Drupal\migrate\MigrateSkipRowException
 */
function cls_migrate_migrate_cls_node_type_prepare_row(Row $row, MigrateSourceInterface $source, MigrationInterface $migration) {
  $types = [
    'hdd',
    'lto',
    'partner',
    'partner_set',
    'shipment',
    'vendor',
  ];
  if (!in_array($row->getSourceProperty('type'), $types)) {
    throw new MigrateSkipRowException($row->getSourceProperty('type') . ' not imported.', TRUE);
  }
}

/**
 * Implements hook_migrate_MIGRATE_ID_prepare_row
 * For the generations import, we want to only import the av generation terms, determined
 * by their parent term, which has tid 37409.
 *
 * @param  \Drupal\migrate\Row  $row
 * @param  \Drupal\migrate\Plugin\MigrateSourceInterface  $source
 * @param  \Drupal\migrate\Plugin\MigrationInterface  $migration
 *
 * @throws \Drupal\migrate\MigrateSkipRowException
 */
function cls_migrate_migrate_cls_field_instance_prepare_row(Row $row, MigrateSourceInterface $source, MigrationInterface $migration) {
  $bundles = [
    'hdd',
    'lto',
    'partner',
    'partner_set',
    'shipment',
    'vendor',
  ];
  if (!(in_array($row->getSourceProperty('bundle'), $bundles) || $row->getSourceProperty('entity_type') == 'taxonomy_term') || strpos($row->getSourceProperty('field_name'), 'field_') !==0   ) {
    throw new MigrateSkipRowException($row->getSourceProperty('entity_type'). ':' . $row->getSourceProperty('bundle') . ':'. $row->getSourceProperty('field_name') .  ' not imported.', TRUE);
  }
}

/**
 * Implements hook_migrate_prepare_row().
 *
 * See https://thinktandem.io/blog/2018/03/30/migrating-drupal-7-organic-groups-to-drupal-8-group/
 */
function cls_migrate_migrate_cls_node_complete_partner_prepare_row(Row $row, MigrateSourceInterface $source, MigrationInterface $migration) {

      // Slugify the title then set that as the alias for the group
      $title = $row->getSourceProperty('title');
      $alias = Html::cleanCssIdentifier($title);
      $alias = '/partner/'. strtolower($alias);
      $row->setSourceProperty('alias', $alias);
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 *
 * See https://thinktandem.io/blog/2018/03/30/migrating-drupal-7-organic-groups-to-drupal-8-group/
 *
 * Adds a user to the respective group identified.
 */
function cls_migrate_user_insert(UserInterface $entity) {
  $add = (new ClsMigrateGroup($entity))->addUserToGroup('field_user_groups');
}

function cls_migrate_group_insert($entity) {

}
