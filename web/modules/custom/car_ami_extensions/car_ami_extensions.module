<?php

/**
 * Display help and module information.
 * @param path
 *   Which path of the site we're displaying help.
 * @param arg
 *   Array that holds the current path as would be returned from arg() function.
 * @return
 *   help text for the path.
 */
function car_ami_extensions_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "help.page.car_ami_extensions":
      $output = <<< EOL
<h2>CAR and AMI Twig extensions</h2>
<ul>
    <li><a href="#car_ami_print_dimensions">car_ami_print_dimensions</a></li>
    <li><a href="#car_ami_page_count_parts">car_ami_page_count_parts</a></li>
    <li><a href="#car_ami_get_variable_variables">car_ami_get_variable_variables</a></li>
    <li><a href="#car_ami_get_values">car_ami_get_values</a></li>
    <li><a href="#car_ami_get_webform_option_value">car_ami_get_webform_option_value</a></li>
    <li><a href="#sbf_webform_option_label">sbf_webform_option_label</a></li>
    <li><a href="#car_ami_get_webform_element_option_value">car_ami_get_webform_element_option_value</a></li>
    <li><a href="#sbf_webform_select_element_option_label">sbf_webform_select_element_option_label</a></li>
</ul>

<h2>Other twig docs</h2>
<ul>
    <li><a href="https://twig.symfony.com/doc/1.x/" target="_blank">twig 1.x function reference</a></li>
    <li><a href="https://www.drupal.org/docs/theming-drupal/twig-in-drupal/functions-in-twig-templates" target="_blank">drupal core twig extensions</a></li>
    <li><a href="https://git.drupalcode.org/project/twig_tweak/-/blob/3.x/docs/cheat-sheet.md" target="_blank">twig_tweak cheat sheet</a></li>
    <li><a href="https://git.drupalcode.org/project/bamboo_twig/-/blob/8.x-5.x/README.md#bamboo-twig-extensions" target="_blank">bamboo_twig extensions</a></li>
</ul>

<br><br>
<a name="car_ami_print_dimensions"></a><br><br><br>
<strong></a>car_ami_print_dimensions(`dimensions string`)</strong>
<pre>
/**
 * Given a string representing print page dimensions, e.g. "2 x 2 in", return width, length, and units.
 *
 * @param  string  \$dimensions_string
 *
 * @return array An array keyed by `length`, `lunits` (if present), `width`, and `units`.
 */
</pre>

<a name="car_ami_page_count_parts"></a><br><br><br>
<strong>car_ami_page_count_parts(`part count string`)</strong>
<pre>
/**
 * Given a string representing print page dimensions, return width, length, and units.
 *
 * This is intended for converting e.g. "4 Tapes of 4"
 *
 * @param  string  \$page_count_string
 *
 * @return array of capture group values if matched: `count`, `type`, `total`.
 */
</pre>

<a name="car_ami_get_variable_variables"></a><br><br><br>
<strong>car_ami_get_variable_variables(`array of variable names`, `regex pattern `, `data.value`, `delimiter for multiple values`)</strong>
<pre>
/**
 * Workaround for lack of variable variables in TWIG.
 * Also handles splitting of values on a delimiter.
 * The regex pattern is the name of the incoming field which will vary by the variable names, with "@var" being the token that is replaced by the variable names.
 *
 * {# Example where you have two input fields corresponding to two roles, and the name label values are pipe "|" delimited:
 *  obj_creator__name_label_plumber_role
 *  obj_creator__name_label_baker_role
 * #}

 * {% set roles = ['plumber', 'baker'] %}
 * {% set creator_name_labels = car_ami_get_variable_variables(roles, "obj_creator__name_label_@var_role", data, "|") %}
 * {% for role, names in creator_name_labels %}
 *  {% for name in names %}
 *   {{ name }} is a {{ role }}
 *  {% endfor %}
 * {% endfor %}
 *
 * @param  array  \$vars
 * @param \$pattern
 * @param \$data
 * @param  string  \$split
 *   default is ";"
 *
 * @return array
 *  An array of arrays keyed by the \$vars where values were found in the \$data,
 *   with each key having one or more values generated by exploding using the \$split string.
 */
</pre>

<a name="car_ami_get_values"></a><br><br><br>
<strong>car_ami_get_values(`value`, `delimiter`)</strong>
<pre>
/**
 * Convert a value into an array of values, split by delimiter.
 *
 * {# Example where the values are pipe "|" delimited: #}
 * {% for value in car_ami_get_values(data.some_field, '|') %}
 *   value is {{ value }}
 * {% endfor %}
 *
 * @param  array|string  \$values
 * @param  string  \$split
 *   default is ";"
 *
 * @return array
 *  An array of strings.
 */
</pre>

<a name="car_ami_get_webform_option_value"></a><br><br><br>
<strong>car_ami_get_webform_option_value(`machine name for the webform option list`, `label value`)</strong>
<pre>
/**
 * Given a webform option list and a label, returns the corresponding option value.
 *
 * @param  string  \$webform_option_list_id
 * @param  string|null  \$label
 *
 * @return null/string
 *   The option label if found. Otherwise null.
 */
</pre>

<a name="sbf_webform_option_label"></a><br><br><br>
<strong>sbf_webform_option_label(`machine name for the webform option list`, `value`)</strong>
<pre>
 /**
 * Given a webform option list and a value, returns the corresponding option label.
 *
 * @param  string  \$webform_option_list_id
 * @param  string|null  \$option
 *
 * @return null|string
 *   The option label if found. Otherwise null.
 */
</pre>


<a name="car_ami_get_webform_element_option_value"></a><br><br><br>
<strong>car_ami_get_webform_element_option_value(`webform machine name`, `webform select element machine name`, `label value`)</strong>
<pre>
/**
 * Given a webform select list element's option label, returns the corresponding option value.
 *
 * @param  string  \$webform_id
 * @param  string  \$element_id
 * @param  string|null  \$label
 *
 * @return null|string
 *   The option label if found. Otherwise null.
 */
</pre>

<a name="sbf_webform_select_element_option_label"></a><br><br><br>
<strong>sbf_webform_select_element_option_label(`webform machine name`, `webform select element machine name`, `value`)</strong>
<pre>
/**
 * Given a webform select list element's option value, returns the corresponding option label.
 *
 * @param  string  \$webform_id
 * @param  string  \$element_id
 * @param  string|null  \$option
 *
 * @return null|string
 *   The option label if found. Otherwise null.
 */
</pre>
EOL;

      break;
  }
  return $output;
}
